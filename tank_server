#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <string.h>
#include <stdlib.h>
pthread_mutex_t siglock;

void * fctr(int tni)
{
int res;
res = multiply(tni);
pthread_mutex_lock(&siglock);
printf("%d\n", res);
pthread_mutex_unlock(&siglock);
pthread_exit(0);
}

int multiply(int tni) {
if (tni<1)
	return 1;
else
	return tni*multiply(tni-1);
}
  
int main(int argc , char *argv[] )
{

if (atoi (argv[1]) % 2 == 0)
{
    pid_t pid;
  
    if (argc != 2)
    {
        printf("we need more arg\n");
        exit(0);
    }
  
    if ( atoi ( argv[1] ) <0 )
    {
        printf("why so negative man %d", atoi(argv[1]));
        exit(0);
    }
  
    pid=fork();

    if ( pid==0 )
    {
        int ans = 0, i, j, k = 2, n;
  
        n = atoi(argv[1]);
        int arr[n],sum[n];
  
        arr[0] = 1;
  
        for (i=1 ; i<n; i++)
        {
            arr[i] = arr[i-1]*k;
            k++;
        }
  
        for (j=0; j<n; j++)
        {
            sum[j] = 0;
            for (i=0; i<=j; i++)
            {
                printf(" %d ",arr[i]);
                sum[j]+=arr[i];
            }
            printf("\n");
        }
  
        for (i=0; i<n; i++)
        {
            if ((sum[i]%2) == 0)
                sum[i] = -1;
        }
    }
  
    else
    {
        wait(NULL);
    }
}
if (atoi(argv[1]) % 2 != 0){

	pthread_t id[1];
	int tni;
	int i = 0;
	tni = atoi(argv[1]);
	void * ret;

	pthread_create(&id[i],NULL,fctr,tni);

	pthread_join(id[i],&ret);

return 0;
}
}
